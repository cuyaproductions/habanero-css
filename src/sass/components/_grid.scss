// Grid System
//
// Habanero has a pretty basic grid system that you can use to you disposal to align elements most effectively.
//
// Styleguide 1

// Container
//
// Unlike past versions of Habanero, it is no longer necessary to have columns inside a `.grid-container` element. This class will now be used to make your design fit within the constraints of a custom vendor page tab.
//
// Markup:
// <div class="grid-container">
//   <div class="col-3">Column 3</div>
//   <div class="col-9">Column 9</div>
// </div>
//
// Styleguide 1.1
.grid-container {
  max-width: 697px;
  margin: 0 auto;
  overflow: hidden;
  box-sizing: border-box;
}


// Columns
//
// Columns are the building blocks to any development layout.
//
// Styleguide 1.2

// 12 Columns
//
// The base grid system is comprised of 12-columns of which can be nested within other columns. *Keep in mind that when nesting columns you're creating a new instance of a 12-column grid*
//
// Markup:
// <div class="row">
//   <div class="col-6">
//     Column 6
//     <div class="row">
//       <div class="col-5">
//         Column 5
//       </div>
//       <div class="col-7">
//         Column 7
//       </div>
//     </div>
//   </div>
//   <div class="col-3">
//     Column 3
//   </div>
//   <div class="col-3">
//     Column 3
//   </div>
// </div>
//
// Styleguide 1.2.1
@function col-width($size, $columns: map-get($GRID, columns)) {
  @return 100% / $columns * $size;
}

@mixin column {
  display: block;
  float: left;
  box-sizing: border-box;
}

@for $i from 1 through map-get($GRID, columns) {
  .col-#{$i} {
    @include column();
    width: calc(#{col-width($size: $i)} - #{map-get($GRID, gutter)});
    margin-left: map-get($GRID, gutter) / 2;
    margin-right: map-get($GRID, gutter) / 2;
    /* === NO GUTTER === */
    &.nogutter {
      width: col-width($i);
      margin-left: 0;
      margin-right: 0;
    }

    &:first-child {
      margin-left: 0;
    }
    &:last-child {
      margin-right: 0;
    }
  }
  // Spacing
  //
  // To modify spacing around and between columns you may use the following classes
  //
  // Markup:
  // <div class="row">
  //   <div class="col-3">
  //     Regular column
  //   </div>
  //   <div class="col-4 {{modifier_class}}">
  //     Modified column with .{{modifier_class}}
  //   </div>
  //   <div class="col-3">
  //     Regular column
  //   </div>
  // </div>
  //
  // .nogutter  - Remove margins around column
  // .offset-2  - Add spacing *before* column. The number after signifies a regular column width of spacing (2 columns wide in this example).
  // .push-2    - Add spacing *after* column. The number after signifies a regular column width of spacing (2 columns wide in this example).
  //
  // Styleguide 1.2.3
  .offset-#{$i} {
    margin-left: calc(#{col-width($i)} + #{map-get($GRID, gutter) / 2}) !important;
    &.nogutter {
      margin-left: col-width($i) !important;
    }
  }
  .push-#{$i} {
    margin-right: calc(#{col-width($i)} + #{map-get($GRID, gutter) / 2}) !important;
    &.nogutter {
      margin-right: col-width($i) !important;
    }
  }
}

// 5 Columns
//
// For situations when you need to have 5 columns you have a 5 column grid at your disposal
//
// Markup:
// <div class="row">
//   <div class="col-5-2">
//     Column 2 of 5
//   </div>
//   <div class="col-5-3">
//     Column 3 of 5
//   </div>
// </div>
//
// Styleguide 1.2.2

@for $i from 1 through 5 {
  .col-5-#{$i} {
    @include column();
    width: calc(#{col-width($columns: 5, $size: $i)} - #{map-get($GRID, gutter)});
    margin-left: map-get($GRID, gutter) / 2;
    margin-right: map-get($GRID, gutter) / 2;
    /* === NO GUTTER === */
    &.nogutter {
      width: 100% / 5 * $i;
      margin-left: 0;
      margin-right: 0;
    }
  }
  .offset-5-#{$i} {
    margin-left: calc(#{col-width($i, 5)} + #{map-get($GRID, gutter) / 2}) !important;
    &.nogutter {
      margin-left: col-width($i, 5) !important;
    }
  }
  .push-5-#{$i} {
    margin-right: calc(#{col-width($i, 5)} + #{map-get($GRID, gutter) / 2}) !important;
    &.nogutter {
      margin-right: col-width($i, 5) !important;
    }
  }
}

// Floating
//
// The following classes will help you float a column to either side of its parent container
//
// Markup:
// <div class="row">
//   <div class="col-4 {{modifier_class}}">
//     Column using .{{modifier_class}}
//   </div>
// </div>
//
// .float-left   - Float to the left (default)
// .float-right  - Float to the right
//
// Styleguide 1.2.4
.float-right {
  float: right;
}
.float-left {
  float: left;
}
.row:after {
  content: " ";
  clear: both;
  display: block;
  height: 0;
  visibility: hidden;
  font-size: 0;
}
